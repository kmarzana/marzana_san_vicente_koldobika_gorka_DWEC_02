+--------------------------------------------------------------+
| 1. Crear la estructura de directorios,                       |
|    respetando la arquitectura estudiada,                     |
|    con los ficheros adjuntos                                 |
+--------------------------------------------------------------+

* Mediante el comando 'tree' en terminal obtenemos el esquema de carpetas:

.
├── index.html
│
├── css
│   └── style.css
│
├── data
│   ├── gastosCombustible.json
│   └── tarifasCombustible.json
│
└── js
    ├── main.js
    └── classes
        └── GastoCombustible.js

+--------------------------------------------------------------+
| 2.a. Modifica el calendario para que solo puedan             |
|      añadirse fechas entre 2010 y 2020                       |
+--------------------------------------------------------------+

* Mediante los atributos del elemento <input> 'min' y 'max'
** https://developer.mozilla.org/es/docs/Web/HTML/Element/input/date

+--------------------------------------------------------------+
| 2.b. Incluir en las variables tarifasJSONpath y              |
|      gastosJSONpath la ruta de los ficheros de datos         |
+--------------------------------------------------------------+

* Se indican las rutas relativas de los archivos de datos JSON.

* let tarifasJSONpath = './data/tarifasCombustible.json';
* let gastosJSONpath = './data/gastosCombustible.json';

+--------------------------------------------------------------+
| 2.c. Calcula los gastos entre 2010 y 2020 usando la          |
|      función calcularGastoTotal()                            |
+--------------------------------------------------------------+

* Mediante un bucle for-of recorremos cada elemento de la variable 'gastosJSON'.
  Para cada elemento, obtenemos el año de la fecha contenida en la clave 'element.date'.
  Este valor de año sirve como clave para acceder a la posición correspondiente en el
  arreglo 'aniosArray', donde acumulamos el valor de la clave 'element.precioViaje'.

    for (const element of gastosJSON) {
        const urtea = (new Date(element.date)).getFullYear();
        aniosArray[urtea] += element.precioViaje;
    }

+--------------------------------------------------------------+
| 2.d. Muestra el importe del gasto total para cada            |
|      año en el apartado “Gastos Totales:”                    |
+--------------------------------------------------------------+

* Mediante un bucle for-in recorremos los valores del arreglo 'aniosArray'.
  Mediante el método '.getElementById()' del objeto 'document' mostramos en
  el HTML los valores de 'aniosArray' en los 'id' reservados para ello en 
  el index.html.

    for (const urtea in aniosArray) {
        let id = `gasto${urtea}`;
        document.getElementById(id).textContent = `${aniosArray[urtea].toFixed(2)}`;
    }

+--------------------------------------------------------------+
| 3.a. Almacena el gasto en un objeto de tipo GastoCombustible |
|                                                              |
|     i. Crea la clase en un fichero independiente en el       |
|        directorio correspondiente                            |
|    ii. Crea los atributos: vehicleType, date, kilometers     |
|        y precioViaje                                         |
|   iii. Crea un método convertToJSON() que serialice a JSON   |
|        los atributos del objeto                              |
+--------------------------------------------------------------+ 

* Se crea el archivo 'GastoCombustible.js' que contiene una clase que 
  convertirá cada elemento de 'gastosCombustible.json' en un objeto tipo
  GastoCombustible. A su vez la clase dispondrá de un método 'convertToJSON'
  que serializará (convertirá a un objeto 'String') los atributos del
  objeto.

** Este objeto 'String', si se quisiera añadir al JSON gastosCombustible.json 
   habría que parsearlo nuevamente a un objeto JSON.

*** Incluir 'export' para poder usar en 'main.js'

    +--------------------------+--------------------------------------------+------------------------------------------+
    | Export Default           | Exportación principal, se importa sin      | import saludar from './miModulo';        |
    |                          | llaves {}.                                 |                                          |
    |                          | Ejemplo:                                   |                                          |
    |                          | export default function saludar() {...}    |                                          |
    +--------------------------+--------------------------------------------+------------------------------------------+

    Clase GastosCombustible -> '/js/classes/GastosCombustible.js'

+---------------------------------------------------------------+
| 3.b. Calcula el precio del viaje y almacénalo en el atributo  |
|      correspondiente del objeto, para ello:                   |
|                                                               |
|     i. Recorre la variable asociada al fichero de tarifas,    |
|        busca la correspondiente al tipo de vehículo y fecha,  |
|        y finalmente calcula el gasto y almacénalo             |
+---------------------------------------------------------------+

* Mediante un bucle for-of recorremos los elementos de 'tarifasCombustible.json'
  Cuando la clave 'element.anio' coincida con el año del formulario
  guardamos en la variable 'tarifa' el valor correspondiente al vehiculo
  seleccionado en el formulario.

** La clave 'element.vehiculos' tiene a su vez otras 3 claves con valores asociados.
   Para acceder a estos valores: 'element.vehiculos[tipoVehiculo]'

*** Se calcula el precio del viaje según los datos indicados en el formulario.

    // for-of + if
    let tarifa;
    for (const element of tarifasJSON.tarifas) {
        if (element.anio == urtea) {
            tarifa = element.vehiculos[tipoVehiculo];
        }
    }

    const precioViaje = kilometros * tarifa;

    // método .find()
    const encontrado = tarifasJSON.tarifas.find(element => element.anio == urtea);
    const tarifaFind = encontrado.vehiculos[tipoVehiculo];

+---------------------------------------------------------------+
| 3.c. En “Gastos recientes:”, muestra en una nueva fila        |
|      el último gasto añadido                                  |
+---------------------------------------------------------------+ 

* Mediante el método '.createElement' del objeto document creamos un
  elemento <li> (que va contenido en un elemento <ul> en 'index.html').
  A este elemento le añadimos el contenido del objeto GastoCombustible 
  obtenido mediante el formulario pero serializado mediante el método
  'convertToJSON()'.
** https://developer.mozilla.org/es/docs/Web/API/Node/appendChild

*** Con '.createElement' creamos <li> -> Con .textContent añadimos el 
    texto -> .appendChild() cerramos el elemento creado </li>

    const elementoLista = document.createElement('li');
    elementoLista.textContent = (new GastoCombustible(tipoVehiculo, fecha, kilometros, precioViaje)).converToJSON();
    document.getElementById('expense-list').appendChild(elementoLista);

+-------------------------------------------------------------+
| 3.d. Actualizará el gasto total correspondiente en el       |
|     apartado “Gastos Totales:”                              |
+-------------------------------------------------------------+ 

* Añadimos el objeto 'GastoCombustible' creado desde el formulario 
  a la variable 'gastosJSON' y recalculamos los 'Gastos Totales'.

    gastosJSON.push(new GastoCombustible(tipoVehiculo, fecha, kilometros, precioViaje));
    calcularGastoTotal();

+-------------------------------------------------------------+
| 3.e. Dejará el formulario en blanco de nuevo                |
+-------------------------------------------------------------+ 

* Mediante el método '.reset()' del objeto 'document' e identificado 
  el id del formulario mediante el método 'getElementById() 
  dejamos el formulario en blanco.

    document.getElementById('fuel-form').reset();